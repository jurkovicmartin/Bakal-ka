from optic.utils import parameters
from optic.models.devices import basicLaserModel
import numpy as np
import matplotlib.pyplot as plt
from optic.models.devices import mzm, pm, iqm, photodiode, coherentReceiver, hybrid_2x4_90deg
from optic.models.channels import linearFiberChannel
from optic.comm.metrics import fastBERcalc
from optic.plot import eyediagram

from optic.comm.modulation import modulateGray, GrayMapping, demodulateGray
from optic.dsp.core import pulseShape, pnorm, signal_power, sigPow
from commpy.utilities  import upsample
try:
    from optic.dsp.coreGPU import firFilter    
except ImportError:
    from optic.dsp.core import firFilter

from scripts.my_devices import laserSource
from scripts.my_plot import opticalSpectrum
from optic.models.devices import basicLaserModel
from optic.models.amplification import get_spectrum
from optic.utils import dBm2W
from scripts.my_devices import idealLaser
from optic.plot import eyediagram

import logging as logg
from numpy.fft import fft, fftfreq, ifft
import scipy.constants as const

def opticalInTime(Ts: int, signal, title: str, type: str):
    """
    Plot optical signal in time showed as magnitude and phase.

    Parameters
    ----
    type: carrier / modulated
    """

    # interval for plot
    interval = np.arange(100,600)
    t = interval*Ts

    magnitude = np.abs(signal[interval]**2)
    phase = np.angle(signal[interval], deg=True)

    if type == "carrier":
        yMin = 0
        yMax = magnitude.max()*2
    # modulated
    else:
        yMin = -1e-6
        yMax = magnitude.max() + 0.05 * magnitude.max()

    # Plotting magnitude and phase in two subplots
    fig, axs = plt.subplots(2, 1, figsize=(8, 4))

    # Plot magnitude
    axs[0].plot(t, magnitude, label="Magnitude", linewidth=2, color="blue")
    axs[0].set_ylabel("Power (p.u.)")
    axs[0].legend(loc="upper left")
    axs[0].set_ylim([yMin, yMax])

    # Plot phase
    axs[1].plot(t, phase, label="Phase", linewidth=2, color="red")
    axs[1].set_ylabel("Phase (°)")
    axs[1].set_xlabel("Time (s)")
    axs[1].legend(loc="upper left")
    axs[1].set_ylim([-180,180])

    plt.suptitle(title)


def myiqm(Ai, u, param=None):
    """
    Optical In-Phase/Quadrature Modulator (IQM).

    Parameters
    ----------
    Ai : scalar or np.array
        Amplitude of the optical field at the input of the IQM.
    u : complex-valued np.array
        Modulator's driving signal (complex-valued baseband).
    param : parameter object  (struct)
        Object with physical/simulation parameters of the mzm.

        - param.Vpi: MZM's Vpi voltage [V][default: 2 V]

        - param.VbI: I-MZM's bias voltage [V][default: -2 V]

        - param.VbQ: Q-MZM's bias voltage [V][default: -2 V]

        - param.Vphi: PM bias voltage [V][default: 1 V]

    Returns
    -------
    Ao : complex-valued np.array
        Modulated optical field at the output of the IQM.

    """
    if param is None:
        param = []

    # check input parameters
    Vpi = getattr(param, "Vpi", 2)
    VbI = getattr(param, "VbI", -2)
    VbQ = getattr(param, "VbQ", -2)
    Vphi = getattr(param, "Vphi", 1)

    try:
        u.shape
    except AttributeError:
        u = np.array([u])

    try:
        if Ai.shape == () and u.shape != ():
            Ai = Ai * np.ones(u.shape)
        else:
            assert Ai.shape == u.shape, "Ai and u need to have the same dimensions"
    except AttributeError:
        Ai = Ai * np.ones(u.shape)

    # define parameters for the I-MZM:
    paramI = parameters()
    paramI.Vpi = Vpi
    paramI.Vb = VbI

    # define parameters for the Q-MZM:
    paramQ = parameters()
    paramQ.Vpi = Vpi
    paramQ.Vb = VbQ

    return mzm(Ai, u.real, paramI) + pm(
        mzm(Ai, u.imag, paramQ), Vphi * np.ones(u.shape), Vpi
    )

def copy_linearFiberChannel(Ei, param):
    """
    Simulate signal propagation through a linear fiber channel.

    Parameters
    ----------
    Ei : np.array
        Input optical field.
    param : parameter object  (struct)
        Object with physical/simulation parameters of the optical channel.

        - param.L: total fiber length [km][default: 50 km]

        - param.alpha: fiber attenuation parameter [dB/km][default: 0.2 dB/km]

        - param.D: chromatic dispersion parameter [ps/nm/km][default: 16 ps/nm/km]

        - param.Fc: carrier frequency [Hz] [default: 193.1e12 Hz]

        - param.Fs: sampling frequency [Hz] [default: None]

        - param.returnParameters: bool, return channel parameters [default: False]

    Returns
    -------
    Eo : np.array
        Optical field at the output of the fiber.

    """
    try:
        Fs = param.Fs
    except AttributeError:
        logg.error("Simulation sampling frequency (Fs) not provided.")

    # check input parameters
    param.L = getattr(param, "L", 50)
    param.alpha = getattr(param, "alpha", 0.2)
    param.D = getattr(param, "D", 16)
    param.Fc = getattr(param, "Fc", 193.1e12)
    param.returnParameters = getattr(param, "returnParameters", False)

    L = param.L
    alpha = param.alpha
    D = param.D
    Fc = param.Fc
    returnParameters = param.returnParameters

    print(alpha)
    print(D)

    # c  = 299792458   # speed of light [m/s](vacuum)
    c_kms = const.c / 1e3
    λ = c_kms / Fc
    α = alpha / (10 * np.log10(np.exp(1)))
    β2 = -(D * λ**2) / (2 * np.pi * c_kms)

    Nfft = len(Ei)

    ω = 2 * np.pi * Fs * fftfreq(Nfft)
    ω = ω.reshape(ω.size, 1)

    try:
        Nmodes = Ei.shape[1]
    except IndexError:
        Nmodes = 1
        Ei = Ei.reshape(Ei.size, Nmodes)

    ω = np.tile(ω, (1, Nmodes))
    Eo = ifft(
        fft(Ei, axis=0) * np.exp(-α / 2 * L + 1j * (β2 / 2) * (ω**2) * L), axis=0
    )

    if Nmodes == 1:
        Eo = Eo.reshape(
            Eo.size,
        )

    if returnParameters:
        return Eo, param
    else:
        return Eo
    

def my_channel(signal, param):
    length = param.L
    attenuation = param.alpha

    # W
    # attenuation = 10**(attenuation / 10)
    # Total
    # attenuation = attenuation * length

    a = attenuation*length
    a = 10**(-a/10)

    return signal * np.sqrt(a)



# INFORMATION SIGNAL
SpS = 8 # Samples per symbol
Rs = 10e9
Fs = SpS * Rs
Ts = 1/Fs
modulationOrder = 2
modulationFormat = "pam"


modulator = "mzm"
idealChannel = False

# generate pseudo-random bit sequence
bitsTx = np.random.randint(2, size=int(np.log2(modulationOrder)*1e6))

# generate modulated symbol sequence
grayMap = GrayMapping(modulationOrder, modulationFormat)
#print(f"grayMap: {grayMap}")

symbolsTx = modulateGray(bitsTx, modulationOrder, modulationFormat)
#print(f"symbolsTx: {symbolsTx}")
symbolsTx = pnorm(symbolsTx) # power normalization

# upsampling
symbolsUp = upsample(symbolsTx, SpS)

# typical NRZ pulse
pulse = pulseShape("nrz", SpS)
pulse = pulse/max(abs(pulse))

# pulse shaping
information = firFilter(pulse, symbolsUp)





ideal = True
if ideal:
    power = 20 # dBm
    carrier = idealLaser(power, len(information))
    Fc = 193.1 * (10**12)
else:
    paramLaser = parameters()
    paramLaser.P = 20  # laser power [dBm] [default: 10 dBm]
    paramLaser.lw = 1 # laser linewidth [Hz] [default: 1 kHz]
    paramLaser.Fs = Fs  # sampling rate [samples/s]
    paramLaser.Ns = len(information)   # number of signal samples [default: 1e3]
    paramLaser.RIN_var = 0
    Fc = 193.1 * (10**12)

    carrier = basicLaserModel(paramLaser)



# MODULATION

if modulator == "mzm":
    paramMZM = parameters()
    paramMZM.Vpi = 2 # frequency of cosinus
    # paramMZM.Vb = -paramMZM.Vpi/2
    paramMZM.Vb = -1 # phase shift of cosinus

    modulated = mzm(carrier, information, paramMZM)

elif modulator == "pm":
    Vpi = 2 # PM’s Vπ voltage

    modulated = pm(carrier, information, Vpi)


elif modulator == "iqm":
    paramIQM = parameters()
    paramIQM.Vpi = 2 # MZM’s Vpi voltage
    paramIQM.VbI = -2 # I-MZM’s bias voltage
    paramIQM.VbQ = -2 # Q-MZM’s bias voltage
    paramIQM.Vphi = 1 # PM bias voltage

    modulated = iqm(carrier, information, paramIQM)

elif modulator == "myiqm":
    paramIQM = parameters()
    paramIQM.Vpi = 2 # MZM’s Vpi voltage
    paramIQM.VbI = -2 # I-MZM’s bias voltage
    paramIQM.VbQ = -2 # Q-MZM’s bias voltage
    paramIQM.Vphi = 1 # PM bias voltage

    modulated = myiqm(carrier, information, paramIQM)

else: pass

discard = 100

opticalInTime(1/Fs, modulated, "modulated", "modulated")
eyediagram(information[discard:-discard], modulated.size-2*discard, SpS, ptype="fancy")


# CHANNEL

# Linear optical channel
paramCh = parameters()
paramCh.L = 100       # total link distance [km]
paramCh.alpha = 0     # fiber loss parameter [dB/km]
paramCh.D = 16       # fiber dispersion parameter [ps/nm/km]
paramCh.Fc = 193.1 * (10**12) # central optical frequency [Hz]
paramCh.Fs = Fs        # simulation sampling frequency [samples/second]

recieved = copy_linearFiberChannel(modulated, paramCh)
# recieved = my_channel(modulated, paramCh)


# Detection
paramPD = parameters
paramPD.idel = True

detected = photodiode(recieved, paramPD)

opticalInTime(1/Fs, recieved, "recieved", "modulated")
eyediagram(detected[discard:-discard], detected.size-2*discard, SpS, ptype="fancy")

print(f"modulated: {10*np.log10(signal_power(modulated) / 1e-3)}")
print(f"recieved: {10*np.log10(signal_power(recieved) / 1e-3)}")


plt.show()